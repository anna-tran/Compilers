module SkelM where

-- Haskell module generated by the BNF converter

import AbsM
import ErrM
import AstM as A
type Result = Err String

failure :: Show a => a -> Result
failure x = Bad $ "Undefined case: " ++ show x

transTokenID :: TokenID -> String
transTokenID x = case x of
  TokenID string -> string
transTokenReal :: TokenReal -> Float
transTokenReal x = case x of
  TokenReal string -> (read string)

transProg :: Prog -> A.M_prog
transProg x = case x of
  Prog block -> A.M_prog (transBlock block)

transBlock :: Block -> ([A.M_decl],[A.M_stmt])
transBlock x = case x of
  Block decls progbody -> ((transDecls decls),(transProgBody progbody))

transDecls :: Decls -> [A.M_decl]
transDecls x = case x of
  DeclDecls decl decls -> (transDecl decl):(transDecls decls)
  NoDecls -> []


transDecl :: Decl -> M_decl
transDecl x = case x of
  VarDecl vardecl -> A.M_var (transVarDecl vardecl)
  FunDecl fundecl -> A.M_fun (transFunDecl fundecl)

transVarDecl :: VarDecl -> (String,[A.M_expr], A.M_type)
transVarDecl x = case x of
  MVar tokenid arrdim type_ -> ((transTokenID tokenid), (transArrDim arrdim), (transType type_))

transType :: Type -> A.M_type
transType x = case x of
  MInt -> A.M_int
  MReal -> A.M_real
  MBool -> A.M_bool

transArrDim :: ArrDim -> [A.M_expr]
transArrDim x = case x of
  ExprArrDim expr arrdim -> (transExpr expr):(transArrDim arrdim)
  NoArrDim -> []
transFunDecl :: FunDecl -> (String,[(String,Int,M_type)],M_type,[M_decl],[M_stmt])
transFunDecl x = case x of
  MFun tokenid1 paramlist tokenid2 funblock -> ((transTokenID tokenid1), (transParamList paramlist))
transFunBlock :: FunBlock -> Result
transFunBlock x = case x of
  DeclFunBody decls funbody -> failure x
transParamList :: ParamList -> Result
transParamList x = case x of
  Params params -> failure x
transParams :: Params -> Result
transParams x = case x of
  DeclMoreParams basicdecl moreparams -> failure x
  NoParams -> failure x
transMoreParams :: MoreParams -> Result
transMoreParams x = case x of
  CommaDeclMoreParams basicdecl moreparams -> failure x
  NoMoreParams -> failure x
transBasicDecl :: BasicDecl -> Result
transBasicDecl x = case x of
  BasicDecl tokenid1 basicarraydim tokenid2 -> failure x
transBasicArrayDim :: BasicArrayDim -> Result
transBasicArrayDim x = case x of
  BasicArrDim basicarraydim -> failure x
  NoBasicArrDim -> failure x
transProgBody :: ProgBody -> Result
transProgBody x = case x of
  ProgStmtsBody progstmts -> failure x
transFunBody :: FunBody -> Result
transFunBody x = case x of
  FunBody progstmts expr -> failure x
transProgStmts :: ProgStmts -> Result
transProgStmts x = case x of
  ProgStmts stmt progstmts -> failure x
  NoProgStmts -> failure x
transStmt :: Stmt -> Result
transStmt x = case x of
  MCond expr stmt1 stmt2 -> failure x
  MWhile expr stmt -> failure x
  MRead identifier -> failure x
  MAss identifier expr -> failure x
  MPrint expr -> failure x
  MBlock block -> failure x
transIdentifier :: Identifier -> Result
transIdentifier x = case x of
  MId tokenid arrdim -> failure x
transExpr :: Expr -> Result
transExpr x = case x of
  ExprBintTerm expr bintterm -> failure x
  BintTerm bintterm -> failure x
transBintTerm :: BintTerm -> Result
transBintTerm x = case x of
  BintTermBintFactor bintterm bintfact -> failure x
  BintFactor bintfact -> failure x
transBintFact :: BintFact -> Result
transBintFact x = case x of
  NotBintFactor bintfact -> failure x
  IntECompareIntE intexpr1 compareop intexpr2 -> failure x
  IntE intexpr -> failure x
transCompareOp :: CompareOp -> Result
transCompareOp x = case x of
  MEq -> failure x
  MLt -> failure x
  MGt -> failure x
  MLe -> failure x
  MGe -> failure x
transIntExpr :: IntExpr -> Result
transIntExpr x = case x of
  IntEAddIntT intexpr addop intterm -> failure x
  IntT intterm -> failure x
transAddOp :: AddOp -> Result
transAddOp x = case x of
  MAdd -> failure x
  MSub -> failure x
transIntTerm :: IntTerm -> Result
transIntTerm x = case x of
  IntTMulIntF intterm mulop intfactor -> failure x
  IntF intfactor -> failure x
transMulOp :: MulOp -> Result
transMulOp x = case x of
  MMul -> failure x
  MDiv -> failure x
transIntFactor :: IntFactor -> Result
transIntFactor x = case x of
  EnclosedExpr expr -> failure x
  MSize tokenid basicarraydim -> failure x
  MFloat expr -> failure x
  MFloor expr -> failure x
  MCeil expr -> failure x
  Id_modlist tokenid modifierlist -> failure x
  MIval integer -> failure x
  MRval double -> failure x
  MBval mbool -> failure x
  MNval intfactor -> failure x
transMbool :: Mbool -> Result
transMbool x = case x of
  NoTrue -> failure x
  NoFalse -> failure x
transModifierList :: ModifierList -> Result
transModifierList x = case x of
  EnclosedArgs args -> failure x
  ArrDim arrdim -> failure x
transArgs :: Args -> Result
transArgs x = case x of
  MoreArgs expr moreargs -> failure x
  NoArgs -> failure x
transMoreArgs :: MoreArgs -> Result
transMoreArgs x = case x of
  ExprMoreArgs expr moreargs -> failure x
  NoMoreArgs -> failure x

