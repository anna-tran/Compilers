mtests/test15.m+

Parse successful!


[Abstract Syntax]

M_prog 
    ([M_var ("n",[],M_int),
    M_fun 
        ("merge",[("b",1,M_int),("n",0,M_int),("mid",0,M_int),("m",0,M_int)],M_bool
        ,[]
        ,[M_cond (M_app (M_lt,
            [M_id ("n",[]),
            M_id ("m",[])]),
            M_block (
                [M_var ("c",[M_app (M_add,
                    [M_app (M_sub,
                        [M_id ("m",[]),
                        M_id ("n",[])]),
                    M_ival 1])],M_int),
                M_var ("i",[],M_int),
                M_var ("j",[],M_int),
                M_var ("k",[],M_int)],
                [M_ass ("i",[],M_id ("n",[])),
                M_ass ("j",[],M_id ("mid",[])),
                M_ass ("k",[],M_ival 0),
                M_while (M_app (M_and,
                    [M_app (M_lt,
                        [M_id ("i",[]),
                        M_id ("mid",[])]),
                    M_app (M_le,
                        [M_id ("j",[]),
                        M_id ("m",[])])]),
                    M_block (
                        [],
                        [M_cond (M_app (M_lt,
                            [M_id ("b",[M_id ("i",[])]),
                            M_id ("b",[M_id ("j",[])])]),
                            M_block (
                                [],
                                [M_ass ("c",[M_id ("k",[])],M_id ("b",[M_id ("i",[])])),
                                M_ass ("i",[],M_app (M_add,
                                    [M_id ("i",[]),
                                    M_ival 1])),
                                M_ass ("k",[],M_app (M_add,
                                    [M_id ("k",[]),
                                    M_ival 1]))]),
                            M_block (
                                [],
                                [M_ass ("c",[M_id ("k",[])],M_id ("b",[M_id ("j",[])])),
                                M_ass ("j",[],M_app (M_add,
                                    [M_id ("j",[]),
                                    M_ival 1])),
                                M_ass ("k",[],M_app (M_add,
                                    [M_id ("k",[]),
                                    M_ival 1]))]))])),
                M_while (M_app (M_lt,
                    [M_id ("i",[]),
                    M_id ("mid",[])]),
                    M_block (
                        [],
                        [M_ass ("c",[M_id ("k",[])],M_id ("b",[M_id ("i",[])])),
                        M_ass ("k",[],M_app (M_add,
                            [M_id ("k",[]),
                            M_ival 1])),
                        M_ass ("i",[],M_app (M_add,
                            [M_id ("i",[]),
                            M_ival 1]))])),
                M_while (M_app (M_le,
                    [M_id ("j",[]),
                    M_id ("m",[])]),
                    M_block (
                        [],
                        [M_ass ("c",[M_id ("k",[])],M_id ("b",[M_id ("j",[])])),
                        M_ass ("k",[],M_app (M_add,
                            [M_id ("k",[]),
                            M_ival 1])),
                        M_ass ("j",[],M_app (M_add,
                            [M_id ("j",[]),
                            M_ival 1]))])),
                M_ass ("k",[],M_ival 0),
                M_while (M_app (M_le,
                    [M_app (M_add,
                        [M_id ("k",[]),
                        M_id ("n",[])]),
                    M_id ("m",[])]),
                    M_block (
                        [],
                        [M_ass ("b",[M_app (M_add,
                                [M_id ("n",[]),
                                M_id ("k",[])])],M_id ("c",[M_id ("k",[])])),
                        M_ass ("k",[],M_app (M_add,
                            [M_id ("k",[]),
                            M_ival 1]))]))]),
            M_block (
                [],
                [])),
        M_return (M_bval True)]),
    M_fun 
        ("sort",[("b",1,M_int),("n",0,M_int),("m",0,M_int)],M_bool
        ,[M_var ("v",[],M_bool)]
        ,[M_cond (M_app (M_lt,
            [M_app (M_sub,
                [M_id ("m",[]),
                M_id ("n",[])]),
            M_ival 0]),
            M_ass ("v",[],M_bval False),
            M_cond (M_app (M_eq,
                [M_id ("n",[]),
                M_id ("m",[])]),
                M_ass ("v",[],M_bval True),
                M_cond (M_app (M_eq,
                    [M_app (M_sub,
                        [M_id ("m",[]),
                        M_id ("n",[])]),
                    M_ival 1]),
                    M_block (
                        [M_var ("temp",[],M_int)],
                        [M_cond (M_app (M_gt,
                            [M_id ("b",[M_id ("n",[])]),
                            M_id ("b",[M_id ("m",[])])]),
                            M_block (
                                [],
                                [M_ass ("temp",[],M_id ("b",[M_id ("n",[])])),
                                M_ass ("b",[M_id ("n",[])],M_id ("b",[M_id ("m",[])])),
                                M_ass ("b",[M_id ("m",[])],M_id ("temp",[])),
                                M_ass ("v",[],M_bval True)]),
                            M_ass ("v",[],M_bval True))]),
                    M_block (
                        [M_var ("mid",[],M_int)],
                        [M_ass ("mid",[],M_app (M_add,
                            [M_id ("n",[]),
                            M_app (M_div,
                                [M_app (M_sub,
                                    [M_id ("m",[]),
                                    M_id ("n",[])]),
                                M_ival 2])])),
                        M_print (M_id ("mid",[])),
                        M_ass ("v",[],M_app (M_and,
                            [M_app (M_and,
                                [M_app (M_fn "sort",
                                    [M_id ("b",[]),
                                    M_id ("n",[]),
                                    M_id ("mid",[])]),
                                M_app (M_fn "sort",
                                    [M_id ("b",[]),
                                    M_app (M_add,
                                        [M_id ("mid",[]),
                                        M_ival 1]),
                                    M_id ("m",[])])]),
                            M_app (M_fn "merge",
                                [M_id ("b",[]),
                                M_id ("n",[]),
                                M_app (M_add,
                                    [M_id ("mid",[]),
                                    M_ival 1]),
                                M_id ("m",[])])]))])))),
        M_return (M_id ("v",[]))])],
    [M_read ("n",[]),
    M_block (
        [M_var ("a",[M_id ("n",[])],M_int)],
        [M_ass ("n",[],M_ival 0),
        M_while (M_app (M_lt,
            [M_id ("n",[]),
            M_size ("a",0)]),
            M_block (
                [],
                [M_read ("a",[M_id ("n",[])]),
                M_ass ("n",[],M_app (M_add,
                    [M_id ("n",[]),
                    M_ival 1]))])),
        M_cond (M_app (M_fn "sort",
            [M_id ("a",[]),
            M_ival 0,
            M_app (M_sub,
                [M_size ("a",0),
                M_ival 1])]),
            M_block (
                [],
                [M_ass ("n",[],M_ival 0),
                M_while (M_app (M_lt,
                    [M_id ("n",[]),
                    M_size ("a",0)]),
                    M_block (
                        [],
                        [M_print (M_id ("a",[M_id ("n",[])])),
                        M_ass ("n",[],M_app (M_add,
                            [M_id ("n",[]),
                            M_ival 1]))]))]),
            M_print (M_ival 0))])])

[Linearized tree]

var n : int ;
fun merge (b [] : int, n : int, mid : int, m : int): bool {
  begin if n < m then {
    var c [m - n + 1]: int ;
    var i : int ;
    var j : int ;
    var k : int ;
    begin i := n ;
    j := mid ;
    k := 0 ;
    while i < mid && j =< m do {
      begin if b [i]< b [j]then {
        begin c [k]:= b [i];
        i := i + 1 ;
        k := k + 1 ;
        end 
      }
      else {
        begin c [k]:= b [j];
        j := j + 1 ;
        k := k + 1 ;
        end 
      } ;
      end 
    } ;
    while i < mid do {
      begin c [k]:= b [i];
      k := k + 1 ;
      i := i + 1 ;
      end 
    } ;
    while j =< m do {
      begin c [k]:= b [j];
      k := k + 1 ;
      j := j + 1 ;
      end 
    } ;
    k := 0 ;
    while k + n =< m do {
      begin b [n + k]:= c [k];
      k := k + 1 ;
      end 
    } ;
    end 
  }
  else {
    begin end 
  } ;
  return true ;
  end 
} ;
fun sort (b [] : int, n : int, m : int): bool {
  var v : bool ;
  begin if m - n < 0 then v := false else if n = m then v := true else if m - n = 1 then {
    var temp : int ;
    begin if b [n]> b [m]then {
      begin temp := b [n];
      b [n]:= b [m];
      b [m]:= temp ;
      v := true ;
      end 
    }
    else v := true ;
    end 
  }
  else {
    var mid : int ;
    begin mid := n + (m - n)/ 2 ;
    print mid ;
    v := sort (b, n, mid)&& sort (b, mid + 1, m)&& merge (b, n, mid + 1, m);
    end 
  } ;
  return v ;
  end 
} ;
begin read n ;
{
  var a [n]: int ;
  begin n := 0 ;
  while n < size (a)do {
    begin read a [n];
    n := n + 1 ;
    end 
  } ;
  if sort (a, 0, size (a)- 1)then {
    begin n := 0 ;
    while n < size (a)do {
      begin print a [n];
      n := n + 1 ;
      end 
    } ;
    end 
  }
  else print 0 ;
  end 
} ;
end

Semantic analysis successful!


[Intermediate representation]


IPROG 
    ([IFUN 
        ("f_merge0",
        [],
        0,
        4,
        [],
        [ICOND 
            (IAPP (ILT,
                [IID (0,-5,[]),
                IID (0,-7,[])]),
            IBLOCK 
                ([],
                4,
                [(1,[IAPP (IADD,
                    [IAPP (ISUB,
                        [IID (1,-7,[]),
                        IID (1,-5,[])]),
                    IINT 1])])],
                [IASS (0,2,[],
                    IID (1,-5,[])),
                IASS (0,3,[],
                    IID (1,-6,[])),
                IASS (0,4,[],
                    IINT 0),
                IWHILE 
                    (IAPP (IAND,
                        [IAPP (ILT,
                            [IID (0,2,[]),
                            IID (1,-6,[])]),
                        IAPP (ILE,
                            [IID (0,3,[]),
                            IID (1,-7,[])])]),
                    IBLOCK 
                        ([],
                        0,
                        [],
                        [ICOND 
                            (IAPP (ILT,
                                [IID (2,-4,[IID (1,2,[])]),
                                IID (2,-4,[IID (1,3,[])])]),
                            IBLOCK 
                                ([],
                                0,
                                [],
                                [IASS (2,1,[IID (2,4,[])],
                                    IID (3,-4,[IID (2,2,[])])),
                                IASS (2,2,[],
                                    IAPP (IADD,
                                        [IID (2,2,[]),
                                        IINT 1])),
                                IASS (2,4,[],
                                    IAPP (IADD,
                                        [IID (2,4,[]),
                                        IINT 1]))]),
                            IBLOCK 
                                ([],
                                0,
                                [],
                                [IASS (2,1,[IID (2,4,[])],
                                    IID (3,-4,[IID (2,3,[])])),
                                IASS (2,3,[],
                                    IAPP (IADD,
                                        [IID (2,3,[]),
                                        IINT 1])),
                                IASS (2,4,[],
                                    IAPP (IADD,
                                        [IID (2,4,[]),
                                        IINT 1]))]))])),
                IWHILE 
                    (IAPP (ILT,
                        [IID (0,2,[]),
                        IID (1,-6,[])]),
                    IBLOCK 
                        ([],
                        0,
                        [],
                        [IASS (1,1,[IID (1,4,[])],
                            IID (2,-4,[IID (1,2,[])])),
                        IASS (1,4,[],
                            IAPP (IADD,
                                [IID (1,4,[]),
                                IINT 1])),
                        IASS (1,2,[],
                            IAPP (IADD,
                                [IID (1,2,[]),
                                IINT 1]))])),
                IWHILE 
                    (IAPP (ILE,
                        [IID (0,3,[]),
                        IID (1,-7,[])]),
                    IBLOCK 
                        ([],
                        0,
                        [],
                        [IASS (1,1,[IID (1,4,[])],
                            IID (2,-4,[IID (1,3,[])])),
                        IASS (1,4,[],
                            IAPP (IADD,
                                [IID (1,4,[]),
                                IINT 1])),
                        IASS (1,3,[],
                            IAPP (IADD,
                                [IID (1,3,[]),
                                IINT 1]))])),
                IASS (0,4,[],
                    IINT 0),
                IWHILE 
                    (IAPP (ILE,
                        [IAPP (IADD,
                            [IID (0,4,[]),
                            IID (1,-5,[])]),
                        IID (1,-7,[])]),
                    IBLOCK 
                        ([],
                        0,
                        [],
                        [IASS (2,-4,[IAPP (IADD,
                                [IID (2,-5,[]),
                                IID (1,4,[])])],
                            IID (1,1,[IID (1,4,[])])),
                        IASS (1,4,[],
                            IAPP (IADD,
                                [IID (1,4,[]),
                                IINT 1]))]))]),
            IBLOCK 
                ([],
                0,
                [],
                [])),
        IRETURN (IBOOL True)],
    IFUN 
        ("f_sort0",
        [],
        1,
        3,
        [],
        [ICOND 
            (IAPP (ILT,
                [IAPP (ISUB,
                    [IID (0,-6,[]),
                    IID (0,-5,[])]),
                IINT 0]),
            IASS (0,1,[],
                IBOOL False),
            ICOND 
                (IAPP (IEQ,
                    [IID (0,-5,[]),
                    IID (0,-6,[])]),
                IASS (0,1,[],
                    IBOOL True),
                ICOND 
                    (IAPP (IEQ,
                        [IAPP (ISUB,
                            [IID (0,-6,[]),
                            IID (0,-5,[])]),
                        IINT 1]),
                    IBLOCK 
                        ([],
                        1,
                        [],
                        [ICOND 
                            (IAPP (IGT,
                                [IID (1,-4,[IID (1,-5,[])]),
                                IID (1,-4,[IID (1,-6,[])])]),
                            IBLOCK 
                                ([],
                                0,
                                [],
                                [IASS (1,1,[],
                                    IID (2,-4,[IID (2,-5,[])])),
                                IASS (2,-4,[IID (2,-5,[])],
                                    IID (2,-4,[IID (2,-6,[])])),
                                IASS (2,-4,[IID (2,-6,[])],
                                    IID (1,1,[])),
                                IASS (2,1,[],
                                    IBOOL True)]),
                            IASS (1,1,[],
                                IBOOL True))]),
                    IBLOCK 
                        ([],
                        1,
                        [],
                        [IASS (0,1,[],
                            IAPP (IADD,
                                [IID (1,-5,[]),
                                IAPP (IDIV,
                                    [IAPP (ISUB,
                                        [IID (1,-6,[]),
                                        IID (1,-5,[])]),
                                    IINT 2])])),
                        IPRINT_I (IID (0,1,[])),
                        IASS (1,1,[],
                            IAPP (IAND,
                                [IAPP (IAND,
                                    [IAPP (ICALL ("f_sort0",2),
                                        [IID (1,-4,[]),
                                        IID (1,-5,[]),
                                        IID (0,1,[])]),
                                    IAPP (ICALL ("f_sort0",2),
                                        [IID (1,-4,[]),
                                        IAPP (IADD,
                                            [IID (0,1,[]),
                                            IINT 1]),
                                        IID (1,-6,[])])]),
                                IAPP (ICALL ("f_merge0",2),
                                    [IID (1,-4,[]),
                                    IID (1,-5,[]),
                                    IAPP (IADD,
                                        [IID (0,1,[]),
                                        IINT 1]),
                                    IID (1,-6,[])])]))])))),
        IRETURN (IID (0,1,[]))]],
    1,
    [],
    [IREAD_I (0,1,[]),
    IBLOCK 
        ([],
        1,
        [(1,[IID (1,1,[])])],
        [IASS (1,1,[],
            IINT 0),
        IWHILE 
            (IAPP (ILT,
                [IID (1,1,[]),
                ISIZE (0,1,1)]),
            IBLOCK 
                ([],
                0,
                [],
                [IREAD_I (1,1,[IID (2,1,[])]),
                IASS (2,1,[],
                    IAPP (IADD,
                        [IID (2,1,[]),
                        IINT 1]))])),
        ICOND 
            (IAPP (ICALL ("f_sort0",1),
                [IID (0,1,[]),
                IINT 0,
                IAPP (ISUB,
                    [ISIZE (0,1,1),
                    IINT 1])]),
            IBLOCK 
                ([],
                0,
                [],
                [IASS (2,1,[],
                    IINT 0),
                IWHILE 
                    (IAPP (ILT,
                        [IID (2,1,[]),
                        ISIZE (1,1,1)]),
                    IBLOCK 
                        ([],
                        0,
                        [],
                        [IPRINT_I (IID (2,1,[IID (3,1,[])])),
                        IASS (3,1,[],
                            IAPP (IADD,
                                [IID (3,1,[]),
                                IINT 1]))]))]),
            IPRINT_I (IINT 0))])]
